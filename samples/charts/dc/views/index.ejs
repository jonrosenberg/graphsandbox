<!DOCTYPE html>
<html>
  <head>
    <title>Crossfilter Demo</title>
    <meta charset="UTF-8">
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link rel='stylesheet' href='/stylesheets/dc.css' />
    <link href="/stylesheets/bootstrap.min.css" rel="stylesheet">
  </head>
  <body>

<script type="text/javascript" src="/js/d3.js"></script>
<script type="text/javascript" src="/js/crossfilter.js"></script>
<script type="text/javascript" src="/js/dc.js"></script>

<div class="container">

<h2>Crossfilter Demo</h2>

<div class="row">
<b>Filters</b><br/>
<a href="#" onclick="javascript:quarterChart.filter('Q1');dc.redrawAll();">Q1</a>
<a href="#" onclick="javascript:quarterChart.filter('Q2');dc.redrawAll();">Q2</a>
<a href="#" onclick="javascript:quarterChart.filter('Q3');dc.redrawAll();">Q3</a>
<a href="#" onclick="javascript:quarterChart.filter('Q4');dc.redrawAll();">Q4</a>
<div id="filters"></div>
</div>

<div class="row">
    <div id="topic-bubble-chart" class="dc-chart">
        <strong>Topic Performance</strong> (x: index gain, y: index gain(%), radius: fluctuation/index ratio, color:
        gain/loss)
        <a class="reset" href="javascript:topicBubbleChart.filterAll();dc.redrawAll();"
           style="display: none;">reset</a>

        <div class="clearfix"></div>
    </div>
</div>

<div class="row">
    <div id="gain-loss-chart">
        <strong>Days by Gain/Loss</strong>
        <a class="reset" href="javascript:gainOrLossChart.filterAll();dc.redrawAll();" style="display: none;">reset</a>

        <div class="clearfix"></div>
    </div>

    <div id="quarter-chart">
        <strong>Quarters</strong>
        <a class="reset" href="javascript:quarterChart.filterAll();dc.redrawAll();" style="display: none;">reset</a>

        <div class="clearfix"></div>
    </div>

    <div id="month-chart">
        <strong>Months</strong>
        <a class="reset" href="javascript:monthChart.filterAll();dc.redrawAll();" style="display: none;">reset</a>

        <div class="clearfix"></div>
    </div>

    <div id="topic-chart">
        <strong>Topics</strong>
        <a class="reset" href="javascript:topicChart.filterAll();dc.redrawAll();" style="display: none;">reset</a>

        <div class="clearfix"></div>
    </div>

    <div id="fluctuation-chart">
        <strong>Days by Fluctuation(%)</strong>
        <a class="reset" href="javascript:fluctuationChart.filterAll();dc.redrawAll();" style="display: none;">reset</a>

        <div class="clearfix"></div>
    </div>
</div>

<div class="row">
    <div id="monthly-move-chart">
        <strong>Monthly Index Abs Move & Volume/500,000 Chart</strong> (Blue Line: Avg Index, Green Line: Index
        Fluctuation)
        <a class="reset" href="javascript:volumeChart.filterAll();dc.redrawAll();"
           style="display: none;">reset</a>

        <div class="clearfix"></div>
    </div>
</div>

<div class="row">
    <div id="monthly-volume-chart">
    </div>
    <p class="muted pull-right" style="margin-right: 15px;">select a time range to zoom in</p>
</div>

<div class="row">
    <div>
        <div class="dc-data-count">
            <span class="filter-count"></span> selected out of <span class="total-count"></span> records | <a
                href="javascript:dc.filterAll(); dc.renderAll();">Reset All</a>
        </div>
    </div>
    <table class="table table-hover dc-data-table">
        <thead>
        <tr class="header">
            <th>Date</th>
            <th>Open</th>
            <th>Close</th>
            <th>Change</th>
            <th>Volume</th>
        </tr>
        </thead>
    </table>
</div>

<script type="text/javascript">
var gainOrLossChart = dc.pieChart("#gain-loss-chart");
var fluctuationChart = dc.barChart("#fluctuation-chart");
var quarterChart = dc.pieChart("#quarter-chart");
var monthChart = dc.pieChart("#month-chart");
var topicChart = dc.pieChart("#topic-chart");
var moveChart = dc.compositeChart("#monthly-move-chart");
var volumeChart = dc.barChart("#monthly-volume-chart");
var topicBubbleChart = dc.bubbleChart("#topic-bubble-chart");

// set dc.js version in title
d3.selectAll("#version").text(dc.version);

// load data from a csv file
d3.csv("/data/tweets.csv", function (data) {
            // since its a csv file we need to format the data a bit
            var dateFormat = d3.time.format("%m/%d/%Y %H:%M:%S");
            var numberFormat = d3.format("f");
		
	    var reccount = 0;
	    var errcount = 0;
            data.forEach(function (e) {
		try 
		{
			var computeddate = e.date + " " + (e.hour >= 10 ? "" + e.hour : "0" + e.hour) + ":00:00";
			e.dd = dateFormat.parse(computeddate);;
			e.month = d3.time.month(e.dd); // pre-calculate month for better performance
			reccount++;
		} 
		catch(err) 
		{
			errcount++;
			alert(err.message + " : " + e.date + " : " + e.dd + " : " + e.month);
		}
            });

		//alert(reccount + " records processed with " + errcount + " errors");
		
            // feed it through crossfilter
            var ndx = crossfilter(data);
            var all = ndx.groupAll();

            var topicDimension = ndx.dimension(function (d) {
                return d.topic;
            });
            var topicPerformanceGroup = topicDimension.group().reduce(
                    //add
                    function (p, v) {
                        ++p.count;
                        p.absGain += +v.close - +v.open;
                        p.fluctuation += Math.abs(+v.close - +v.open);
                        p.sumIndex += (+v.open + +v.close) / 2;
                        p.avgIndex = p.sumIndex / p.count;
                        p.percentageGain = (p.absGain / p.avgIndex) * 100;
			p.sumKloutScore += (+v.klout);
			p.avgKloutScore = p.sumKloutScore / p.count;
			p.sumSentiment += (+v.sentiment);
			p.avgSentiment = p.sumSentiment / p.count;
                        p.fluctuationPercentage = (p.fluctuation / p.avgIndex) * 100;
                        return p;
                    },
                    //remove
                    function (p, v) {
                        --p.count;
                        p.absGain -= +v.close - +v.open;
                        p.fluctuation -= Math.abs(+v.close - +v.open);
                        p.sumIndex -= (+v.open + +v.close) / 2;
                        p.avgIndex = p.sumIndex / p.count;
			p.sumKloutScore -= (+v.klout);
			p.avgKloutScore = p.sumKloutScore / p.count;
			p.sumSentiment -= (+v.sentiment);
			p.avgSentiment = p.sumSentiment / p.count;
                        p.percentageGain = (p.absGain / p.avgIndex) * 100;
                        p.fluctuationPercentage = (p.fluctuation / p.avgIndex) * 100;
                        return p;
                    },
                    //init
                    function () {
                        return {count: 0, absGain: 0, fluctuation: 0, fluctuationPercentage: 0, sumIndex: 0, avgIndex: 0, sumKloutScore: 0, avgKloutScore: 0, percentageGain: 0, avgSentiment: 0, sumSentiment: 0};
                    }
            );

            var dateDimension = ndx.dimension(function (d) {
                return d.dd;
            });

            // monthly index avg fluctuation in percentage
            var moveMonths = ndx.dimension(function (d) {
                return d.month;
            });
            var monthlyMoveGroup = moveMonths.group().reduceSum(function (d) {
                return Math.abs(+d.close - +d.open);
            });
            var volumeByMonthGroup = moveMonths.group().reduceSum(function (d) {
                return d.volume / 500000;
            });
            var indexAvgByMonthGroup = moveMonths.group().reduce(
                    function (p, v) {
                        ++p.days;
                        p.total += (+v.open + +v.close) / 2;
                        p.avg = Math.round(p.total / p.days);
                        return p;
                    },
                    function (p, v) {
                        --p.days;
                        p.total -= (+v.open + +v.close) / 2;
                        p.avg = p.days == 0 ? 0 : Math.round(p.total / p.days);
                        return p;
                    },
                    function () {
                        return {days: 0, total: 0, avg: 0};
                    }
            );

            var gainOrLoss = ndx.dimension(function (d) {
                return +d.open > +d.close ? "Loss" : "Gain";
            });
            var gainOrLossGroup = gainOrLoss.group();

            var fluctuation = ndx.dimension(function (d) {
                return Math.round((d.close - d.open) / d.open * 100);
            });
            var fluctuationGroup = fluctuation.group();

            var quarter = ndx.dimension(function (d) {
                var month = d.dd.getMonth() + 1;
                if (month <= 3)
                    return "Q1";
                else if (month >= 4 && month <= 6)
                    return "Q2";
                else if (month >= 7 && month <= 9)
                    return "Q3";
                else
                    return "Q4";
            });
            var quarterGroup = quarter.group().reduceSum(function (d) {
                return d.volume;
            });

	    function GetMonthNameForDate(d)
	    {
                var month = d.getMonth() + 1;
		var mt = "Err";
                     if (month === 1) mt = "Jan";
		else if (month === 2) mt = "Feb";
		else if (month === 3) mt = "Mar";
		else if (month === 4) mt = "Apr";
		else if (month === 5) mt = "May";
		else if (month === 6) mt = "Jun";
		else if (month === 7) mt = "Jul";
		else if (month === 8) mt = "Aug";
		else if (month === 9) mt = "Sep";
		else if (month === 10) mt = "Oct";
		else if (month === 11) mt = "Nov";
		else if (month === 12) mt = "Dec";
		return mt;
            }

            var monthDimension = ndx.dimension(function (d) {
                return GetMonthNameForDate(d.dd);
            });


            var monthGroup = monthDimension.group().reduceSum(function (d) {
                return d.volume;
            });

            var topicGroup = topicDimension.group().reduceSum(function (d) {
                return d.volume;
            });

            topicBubbleChart.width(990)
                    .height(250)
                    .margins({top: 10, right: 50, bottom: 30, left: 40})
                    .dimension(topicDimension)
                    .group(topicPerformanceGroup)
                    .transitionDuration(1500)
                    .colors(["#a60000", "#ff0000", "#ff4040", "#ff7373", "#67e667", "#39e639", "#00cc00"])
                    .colorDomain([-12000, 12000])
                    .colorAccessor(function (d) {
                        return d.value.absGain;
                    })
                    .keyAccessor(function (p) {
			//alert("keyAccessorr = " + p.value.avgSentiment);
                        return p.value.avgSentiment;
                    })
                    .valueAccessor(function (p) {
			//alert("ValueAccessor = " + p.value.avgKloutScore);
                        return p.value.avgKloutScore;
                    })
                    .radiusValueAccessor(function (p) {
			//alert("RadiusAccessor = " + p.value.avgIndex);
                        return p.value.avgIndex / 10000;
                    })
                    .maxBubbleRelativeSize(0.3)
                    .x(d3.scale.linear().domain([0, 100]))
                    .y(d3.scale.linear().domain([20, 90]))
                    .r(d3.scale.linear().domain([0, 200]))
                    .elasticY(true)
                    .yAxisPadding(10)
                    .elasticX(true)
                    .xAxisPadding(10)
                    .renderHorizontalGridLines(true)
                    .renderVerticalGridLines(true)
                    .renderLabel(true)
                    .renderTitle(true)
                    .label(function (p) {
                        return p.key;
			//return p.key.getFullYear();
                    })
                    .title(function (p) {
                        return p.key.getFullYear()
                                + "\n"
                                + "Index Gain: " + numberFormat(p.value.absGain) + "\n"
                                + "Index Gain in Percentage: " + numberFormat(p.value.percentageGain) + "%\n"
                                + "Fluctuation / Index Ratio: " + numberFormat(p.value.fluctuationPercentage) + "%";
                    })
                    .yAxis().tickFormat(function (v) {
                        return v + "%";
                    });

            gainOrLossChart.width(180)
                    .height(180)
                    .radius(80)
                    .dimension(gainOrLoss)
                    .group(gainOrLossGroup)
                    .label(function (d) {
                        return d.data.key + "(" + Math.floor(d.data.value / all.value() * 100) + "%)";
                    })
                    .on("filtered", function (chart) {
                        $("#filters").text(chart.filter.arguments[0]);
                    });

            quarterChart.width(180)
                    .height(180)
                    .radius(80)
                    .innerRadius(30)
                    .dimension(quarter)
                    .group(quarterGroup);

            monthChart.width(180)
                    .height(180)
                    .radius(80)
                    .innerRadius(30)
                    .dimension(monthDimension)
                    .group(monthGroup);

            topicChart.width(180)
                    .height(180)
                    .radius(80)
                    .colors(['#3182bd', '#6baed6', '#9ecae1', '#c6dbef', '#dadaeb'])
                    .innerRadius(30)
                    .dimension(topicDimension)
                    .group(topicGroup)
                    .on("filtered", function (chart) {
			//var el = document.getElementById(
                        $("#filters").text(chart.filter.arguments[0]);
                    });

            fluctuationChart.width(420)
                    .height(180)
                    .margins({top: 10, right: 50, bottom: 30, left: 40})
                    .dimension(fluctuation)
                    .group(fluctuationGroup)
                    .elasticY(true)
                    .centerBar(true)
                    .gap(1)
                    .round(dc.round.floor)
                    .x(d3.scale.linear().domain([-25, 25]))
                    .renderHorizontalGridLines(true)
                    .xAxis()
                    .tickFormat(function (v) {
                        return v + "%";
                    });

            moveChart.width(990)
                    .height(180)
                    .transitionDuration(1000)
                    .margins({top: 10, right: 50, bottom: 25, left: 40})
                    .dimension(moveMonths)
                    .group(indexAvgByMonthGroup)
                    .valueAccessor(function (d) {
                        return d.value.avg;
                    })
                    .x(d3.time.scale().domain([new Date(2012, 0, 1), new Date(2012, 11, 31)]))
                    .round(d3.time.month.round)
                    .xUnits(d3.time.months)
                    .elasticY(true)
                    .renderHorizontalGridLines(true)
                    .brushOn(false)
                    .compose([
                        dc.lineChart(moveChart).group(indexAvgByMonthGroup)
                                .valueAccessor(function (d) {
                                    return d.value.avg;
                                })
                                .renderArea(true)
                                .stack(monthlyMoveGroup, function (d) {
                                    return d.value;
                                })
                                .title(function (d) {
                                    var value = d.value.avg ? d.value.avg : d.value;
                                    if (isNaN(value)) value = 0;
                                    return dateFormat(d.key) + "\n" + numberFormat(value);
                                })
                    ])
                    .xAxis();

            volumeChart.width(990)
                    .height(40)
                    .margins({top: 0, right: 50, bottom: 20, left: 40})
                    .dimension(moveMonths)
                    .group(volumeByMonthGroup)
                    .centerBar(true)
                    .gap(0)
                    .x(d3.time.scale().domain([new Date(2012, 0, 1), new Date(2012, 11, 31)]))
                    .round(d3.time.month.round)
                    .xUnits(d3.time.months)
                    .renderlet(function (chart) {
                        chart.select("g.y").style("display", "none");
                        moveChart.filter(chart.filter());
                    })
                    .on("filtered", function (chart) {
                        dc.events.trigger(function () {
                            moveChart.focus(chart.filter());
                        });
                    });


            dc.dataCount(".dc-data-count")
                    .dimension(ndx)
                    .group(all);

            dc.dataTable(".dc-data-table")
                    .dimension(dateDimension)
                    .group(function (d) {
                        var format = d3.format("02d");
                        return d.dd.getFullYear() + "/" + format((d.dd.getMonth() + 1));
                    })
                    .size(10)
                    .columns([
                        function (d) {
                            return d.date;
                        },
                        function (d) {
                            return d.open;
                        },
                        function (d) {
                            return d.close;
                        },
                        function (d) {
                            return numberFormat(d.close - d.open);
                        },
                        function (d) {
                            return d.volume;
                        }
                    ])
                    .sortBy(function (d) {
                        return d.dd;
                    })
                    .order(d3.ascending)
                    .renderlet(function (table) {
                        table.selectAll(".dc-table-group").classed("info", true);
                    });

            dc.renderAll();
        }
);
</script>

<div class="clearfix"></div>


</div>

<script src="http://code.jquery.com/jquery-latest.js"></script>
<script src="/js/bootstrap.min.js"></script>

</body>
</html>
